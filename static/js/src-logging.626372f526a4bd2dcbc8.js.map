{"version":3,"sources":["/home/circleci/project/packages/docs/src/logging.mdx"],"names":["MDXContent","props","_this","Object","_home_circleci_project_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_home_circleci_project_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_circleci_project_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","layout","_this$props","components","_home_circleci_project_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","href","className","React","Component","isMDXComponent"],"mappings":"+4BAQqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,OAAS,KAFGP,wEAIV,IAAAQ,EAC0BL,KAAKJ,MAA9BU,EADDD,EACCC,WADDR,OAAAS,EAAA,EAAAT,CAAAO,EAAA,gBAGP,OAAOG,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEC,KAAK,UAELN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYV,MAAO,CAACiB,GAAK,YAAvD,WACrCL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC9BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYQ,WAAW,MAArD,kFAEAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,0DACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC9BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYQ,WAAW,MAArD,sEAEAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,4OAGOE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,qCAHP,qKAMAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC9BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYQ,WAAW,MAArD,6DAEAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,WAAqDE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYQ,WAAW,IAAIlB,MAAO,CAACmB,KAAO,sBAAvE,UAArD,sFAC0CP,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,EAAYQ,WAAW,KAA7D,UAD1C,wEAGAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,4CACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,GAC9BE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYQ,WAAW,MAArD,uBACAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,KAAKN,WAAYA,EAAYQ,WAAW,MAArD,iCAEAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,GAA7B,6BACAE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,aAAaN,WAAYA,GACtCE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,IAAIN,WAAYA,EAAYQ,WAAW,cAApD,wBAEAN,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,MAAMN,WAAYA,GAAYE,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,KAAK,OAAON,WAAYA,EAAYQ,WAAW,MAAMlB,MAAO,CAACoB,UAAY,wBAAjF,k8CAxCHC,IAAMC,qVAuF9CvB,EAAWwB,gBAAiB","file":"static/js/src-logging.a4dcf09e.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"logging\"}}>{`logging`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`a logging provider should be created as early as possible in your application`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`like all functional programming application resources,`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`pass the logging resource to all consumers via function arguments`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`other languages, such as python, support a system level logger.\nsuch system level loggers, whilst convenient, are also highly stateful and subject\nto unexpected mutation by consumers.  further, doing direct resource imports,\ne.g. `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`import { logger } from './logger'`}</MDXTag>{`, has debatably harmful costs--such as\nforcing you to mock or override default runtime behavior in things like tests,\nwhere you may not care to see log output.`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`consider a standard log schema & easily parseable format`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`such as `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"http://ndjson.org\"}}>{`ndjson`}</MDXTag>{` if you plan to use a logging aggregator.\ni like to configure my logger to log in `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`ndjson`}</MDXTag>{` in non-dev environments, and pretty print\nlogs during development.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`the following example does not consider:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`what content to log`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\">{`what logging provider to use`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`that's up to you, friend.`}</MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`application logging`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-typescript\"}}>{`// src/bin\nconst config = createConfig(...)\nconst logger = createLogger(config.logging)\n\n// observe the logger shared between server, middlewares, and services\nconst server = await createServer({ config, logger })\nconst services = await createBackgroundServices({ config, logger })\n\n// src/server\n// ...\nasync function createServer ({ config, logger }) {\n  const app = new Koa()\n  const mw = await createMiddlewares({ config, logger })\n  app.use(mw)\n  return app\n}\n\n// src/middleware/cool-mw\nfunction createCoolMw ({ logger }) {\n  logger.debug('creating cool middleware')\n  return (ctx, next) => {\n    logger.warn('(⌐■_■) ( •_•)>⌐■-■ (•_•)')\n    await next()\n    logger.info('(•_•) ( •_•)>⌐■-■ (⌐■_■)')\n  }\n}\n\n// src/util/widget\nconst debug = require('debug')('widget')\nfunction buildWidget (pieces) {\n  // library-esqe code is fine to log from,\n  // but generally **should't use an application-level\n  // logger**. consider modules like \\`debug\\`, or\n  // conditional console logging instead.  be weary\n  // of coupling libary code to application code and accidentally\n  // reducing portability of your work.\n  debug(\\`received \\${pieces.length} pieces\\`)\n  // or\n  if (process.env.NODE_ENV === 'development') {\n    console.info(\\`received \\${pieces.length} pieces\\`)\n  }\n  return pieces.map(piece => piece.name).join('-')\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "],"sourceRoot":""}