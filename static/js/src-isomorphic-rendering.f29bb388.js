(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./src/isomorphic-rendering.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var a=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),o=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js"),s=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),i=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),p=t("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js"),c=t("../../node_modules/react/index.js"),l=t.n(c),m=t("../../node_modules/@mdx-js/tag/dist/index.js"),d=function(e){function n(e){var t;return Object(r.a)(this,n),(t=Object(s.a)(this,Object(i.a)(n).call(this,e))).layout=null,t}return Object(p.a)(n,e),Object(o.a)(n,[{key:"render",value:function(){var e=this.props,n=e.components;Object(a.a)(e,["components"]);return l.a.createElement(m.MDXTag,{name:"wrapper",components:n},l.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"isomorphic-rendering"}},"isomorphic rendering"),l.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"overview"}},"overview"),l.a.createElement(m.MDXTag,{name:"p",components:n},"isomorphic rendering, whilst considered an advanced concept, is conceptually simple.\nthe objective is to render a complete html page when a user requests your website, such that\nthey may begin viewing content immediately. once the page loads, the interactive\nweb-application experience downloads and instantiates itself, asyncronously.\nthe final result is that user gets content faster, as hence perceives your application to\nbe faster."),l.a.createElement(m.MDXTag,{name:"p",components:n},"there are many technology stacks, front-end and back-end, that enable this workflow.\nthis particular demonstration uses:"),l.a.createElement(m.MDXTag,{name:"ul",components:n},l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},l.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://reactjs.org"}},"react")," & ",l.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://redux.js.org"}},"redux")," for the ui application"),l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},l.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://www.npmjs.com/package/koa-parcel-middleware"}},"koa-parcel-middleware")," for integrating the ui application with the server"),l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"li"},"koa")," for our server")),l.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"strategy"}},"strategy"),l.a.createElement(m.MDXTag,{name:"ul",components:n},l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"create a ui application bundler instance.",l.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"in this case, we will use parcel's bundler.  why do you need a bundler?  ",l.a.createElement(m.MDXTag,{name:"a",components:n,parentName:"li",props:{href:"https://webpack.js.org/concepts/why-webpack/"}},"webpack's doc cover this well")))),l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"create a static asset middleware for serving ui assets (images, css files, etc)"),l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"create a parcel middleware ",l.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"li"},"using the bundler instance")," and the static fileserver middleware",l.a.createElement(m.MDXTag,{name:"ul",components:n,parentName:"li"},l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"this will compile your ui and serve it to browsers on request"))),l.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"register the middleware.")),l.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"demonstration"}},"demonstration"),l.a.createElement(m.MDXTag,{name:"p",components:n},"the web-application by default starts with minimal state.\nit's a basic counter app starting with the ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"count")," at ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0"),". however,\nyou will see that when using server-side rendering, we provide an ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"initialState")," where\nthe count is equal to ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"99"),".  because we rendered a react app with ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"count === 99"),", the\nresultant html shows 99 to the user immediately.  once the javascript finishes\ndownloading in the background, the increment/decrement buttons work starting from 99, because we ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"hydrate"),"d\nthe react app with the same initial state (see ",l.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"window.INITIAL_STATE"),")!"),l.a.createElement(m.MDXTag,{name:"blockquote",components:n},l.a.createElement(m.MDXTag,{name:"p",components:n,parentName:"blockquote"},"isomorphic react redux app")),l.a.createElement(m.MDXTag,{name:"pre",components:n},l.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-html"}},'\x3c!--\n  react-redux-app/index.html\n  parcel _and_ our parcel middleware will use this html\n  template. note that parcel wants src=app.tsx as an\n  entrypoint, which of course isn\'t a valid js file ;)\n--\x3e\n<html>\n<head>\n  <title>react-redux ssr demo</title>\n  \x3c!-- head-content --\x3e\n</head>\n  <div id="app">\x3c!-- ssr-content --\x3e</div>\n  <script src="app.tsx"><\/script>\n</html>\n')),l.a.createElement(m.MDXTag,{name:"pre",components:n},l.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"// react-redux-app/app.tsx - a barebones react-redux application\nconst DEFAULT_STATE = { count: 0 }\nfunction reducer (state = DEFAULT_STATE, action: any) {\n  // ...\n}\n\nexport const App = connect(\n  state => state,\n  dispatch => ({\n    inc: () => dispatch({ type: INC }),\n    dec: () => dispatch({ type: DEC })\n  })\n)((props: any) => (\n  <div>\n    {props.count}\n    <button onClick={props.dec}>-</button>\n    <button onClick={props.inc}>+</button>\n  </div>\n))\n\nexport const ConnectedApp = ({ store }: { store: Store }) => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nexport const createAppStore = (initialState: any) =>\n  createStore(reducer, initialState)\n\nif (isNode) {\n  // render an html page in the server process,\n  // and the react application to string from within\n} else {\n  const appNode = document.getElementById('app')\n  ReactDOM.hydrate(\n    <ConnectedApp store={createAppStore((window as any).INITIAL_STATE)} />,\n    appNode\n  )\n}\n")),l.a.createElement(m.MDXTag,{name:"pre",components:n},l.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"// react-redux-app/server.ts\nconst ENTRY_FILENAME = path.resolve(__dirname, 'index.html')\nasync function start () {\n  const outFile = path.resolve(__dirname, 'dist', 'index.html')\n  const app = new Koa()\n  const outDir = path.resolve(__dirname, 'dist')\n  // create a ui application bundler\n  const options = {\n    outDir,\n    outFile,\n    watch: process.env.NODE_ENV === 'development',\n    minify: process.env.NODE_ENV !== 'development',\n    scopeHoist: false,\n    hmr: process.env.NODE_ENV === 'development',\n    detailedReport: false\n  }\n  const bundler = new Bundler(ENTRY_FILENAME, options)\n  bundler.bundle()\n  const staticMiddleware = serveStatic(outDir)\n  const isomorphicRenderMiddleware = createMiddleware({\n    bundler,\n    renderHtmlMiddleware: async (ctx, next) => {\n      // stream the html file, but with react/redux data spliced in\n      // parcel has already compiled our app now, and has\n      // a fancy _proper_ html entrypoint at outFile, which has all of our original\n      // html + comments, but modified to point to built assets (e.g. js files,\n      // versus tsx files). serve that html asset, with redux state _and_\n      // a stringified react => html tree!\n      const outFileBuffer = await fs.readFile(outFile)\n      const [preHeadClose, postHeadClose ] = outFileBuffer.toString()\n        .split(/\x3c!--.*head-content.*--\x3e/)\n      const [ preAppEntry, postAppEntry ] = postHeadClose\n        .split(/\x3c!--.*ssr-content.*--\x3e/)\n      ctx.status = 200\n      const htmlStream = new CombinedStream()\n      const initialState = { count: 99 } // you'd probably do something more interesting here\n      ;[\n        preHeadClose,\n        // send the initial state date to the browser, so it can use it for hydration\n        `<script>window.INITIAL_STATE = ${JSON.stringify(initialState)}<\/script>`,\n        preAppEntry,\n        // render react's html using our desired initial state\n        ReactDOMServer.renderToNodeStream(ConnectedApp({ store: createAppStore(initialState) })),\n        postAppEntry\n      ].map(content => htmlStream.append(content))\n      ctx.body = htmlStream\n      ctx.type = 'html'\n      await next()\n    },\n    staticMiddleware\n  })\n  app.use((ctx, next) => {\n    return isomorphicRenderMiddleware(ctx, next)\n  })\n  app.listen(3000)\n}\nstart()\n")))}}]),n}(l.a.Component);"undefined"!==typeof d&&d&&d===Object(d)&&Object.defineProperty(d,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/isomorphic-rendering.mdx"}}),"undefined"!==typeof d&&d&&d===Object(d)&&Object.defineProperty(d,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/isomorphic-rendering.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=src-isomorphic-rendering.ad1c1451b82f83e13e39.js.map