(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"./src/serve-an-api-and-ui.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",function(){return u});var t=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),s=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js"),r=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),p=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),l=a("../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js"),i=a("../../node_modules/react/index.js"),m=a.n(i),c=a("../../node_modules/@mdx-js/tag/dist/index.js"),u=function(e){function n(e){var a;return Object(o.a)(this,n),(a=Object(r.a)(this,Object(p.a)(n).call(this,e))).layout=null,a}return Object(l.a)(n,e),Object(s.a)(n,[{key:"render",value:function(){var e=this.props,n=e.components;Object(t.a)(e,["components"]);return m.a.createElement(c.MDXTag,{name:"wrapper",components:n},m.a.createElement(c.MDXTag,{name:"h1",components:n,props:{id:"serve-an-api-and-a-ui-application"}},"serve an api and a ui application"),m.a.createElement(c.MDXTag,{name:"p",components:n},"it's commonplace to serve web assets from a fast fileserver, e.g. nginx, and a\nsupporting api from another.  this isn't always the case, however.  it can be\nconvenient to ship only one executable to provide both value streams."),m.a.createElement(c.MDXTag,{name:"blockquote",components:n},m.a.createElement(c.MDXTag,{name:"p",components:n,parentName:"blockquote"},"api + static server")),m.a.createElement(c.MDXTag,{name:"pre",components:n},m.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript"}},"// api-and-static/server.ts\nimport mount from 'koa-mount'\nimport serve = require('koa-static')\n\n// fileserver app\nconst fileserver = new Koa()\nfileserver.use(serve(PUBLIC_DIRNAME))\n// api app\nconst api = new Koa()\napi.use(ctx => { ctx.body = { ok: true }})\n// root app\nconst app = new Koa()\napp.use(mount('/api', api))\napp.use(mount('/', fileserver))\napp.listen(3000)\n\n// $ curl localhost:3000\n// <html>\n//   <h1>ahoy, matees</h1>\n// </html>\n\n// $ curl localhost:3000/kittens/talk.txt\n// meow # served straight from disk!\n\n// $ curl localhost:3000/api\n// { \"ok\": true }\n")))}}]),n}(m.a.Component);"undefined"!==typeof u&&u&&u===Object(u)&&Object.defineProperty(u,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/serve-an-api-and-ui.mdx"}}),"undefined"!==typeof u&&u&&u===Object(u)&&Object.defineProperty(u,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/serve-an-api-and-ui.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=src-serve-an-api-and-ui.ad1c1451b82f83e13e39.js.map